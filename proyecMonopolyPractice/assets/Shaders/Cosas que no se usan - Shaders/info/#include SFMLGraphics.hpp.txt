#include <SFML/Graphics.hpp>
#include <vector>
#include <string>
#include <iostream>

int main() {
    sf::RenderWindow window(sf::VideoMode(1800, 800), "Shader Test");

    std::vector<std::string> shaderFiles = {
        "resource/Shaders/FresnelEffect.frag",
        "resource/Shaders/Pixelation.frag",
        "resource/Shaders/RipplyDistortion.frag",
        "resource/Shaders/Vignette.frag",
        "resource/Shaders/OldFilm.frag",
        "resource/Shaders/SineWaveDistortion.frag",
        "resource/Shaders/ColorShift.frag",
        "resource/Shaders/EdgeDetection.frag",
        "resource/Shaders/ChromaticAberration.frag",
        "resource/Shaders/Distortion.frag",
        "resource/Shaders/Glitch2.frag",
        "resource/Shaders/HeatHaze.frag",
        "resource/Shaders/WavyDistortion.frag",
        "resource/Shaders/Mosaic.frag",
        "resource/Shaders/WaveEffect.frag",
        "resource/Shaders/TVScanlines.frag",
        "resource/Shaders/ColorPulse.frag",
        "resource/Shaders/LiquidMetal.frag",
        "resource/Shaders/DreamyGlow.frag",
        "resource/Shaders/PixelWave.frag"
    };

    sf::Shader shader;
    sf::Texture texture;
    sf::Sprite sprite;

    if (!texture.loadFromFile("resource/texture/logojuego14.png")) {
        std::cerr << "Failed to load texture" << std::endl;
        return -1;
    }

    sprite.setTexture(texture);

    sf::Clock clock;

    size_t currentShaderIndex = 0;

    while (window.isOpen()) {

        sf::Time elapsed = clock.getElapsedTime(); // Obtener el tiempo transcurrido
        float timeValue = elapsed.asSeconds();

        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
            if (event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::Space) {
                    currentShaderIndex = (currentShaderIndex + 1) % shaderFiles.size();
                    if (!shader.loadFromFile(shaderFiles[currentShaderIndex], sf::Shader::Fragment)) {
                        std::cerr << "Failed to load shader: " << shaderFiles[currentShaderIndex] << std::endl;
                    }
                }
            }
        }
        //float timeValue = clock.getElapsedTime().asSeconds(); 
        // Set shader-specific uniforms
        if (shader.isAvailable()) {
         
            switch (currentShaderIndex) {
            case 0: // FresnelEffect
                shader.setUniform("viewDir", sf::Vector3f(0.0f, 0.0f, 1.0f));
                shader.setUniform("fresnelPower", 2.0f);
                break;
            case 1: // Pixelation
                shader.setUniform("pixelSize", 0.05f);
                break;
            case 2: // RipplyDistortion
                shader.setUniform("time", clock.getElapsedTime().asSeconds());
                shader.setUniform("intensity", 0.05f);
                break;
            case 3: // Vignette
                shader.setUniform("center", sf::Vector2f(0.5f, 0.5f));
                shader.setUniform("radius", 0.4f);
                break;
            case 4: // OldFilm
                shader.setUniform("time", timeValue);
                break;
            case 5: // SineWaveDistortion
                shader.setUniform("time", timeValue);
                shader.setUniform("intensity", 0.05f);
                break;
            case 6: // ColorShift
                shader.setUniform("shiftAmount", timeValue);
                break;
            case 7: // EdgeDetection
                break; // No additional uniforms needed
            case 8: // ChromaticAberration
                shader.setUniform("aberrationAmount", 0.01f);
                break;
            case 9: // Distortion
                shader.setUniform("distortionAmount", 0.05f);
                break;
            case 10: // Glitch
                shader.setUniform("time", timeValue);
                shader.setUniform("glitchAmount", 0.05f);
                break;
            case 11: // HeatHaze
                shader.setUniform("time", timeValue);
                break;
            case 12: // Wavy Distortion
                shader.setUniform("time", timeValue);
                shader.setUniform("waveStrength", 0.05f);
                break;
            case 13: // Mosaic
                shader.setUniform("mosaicSize", 0.05f);
                break;
            case 14: // Wave Effect
                shader.setUniform("time", timeValue);
                shader.setUniform("waveSpeed", 1.0f);
                break;
            case 15: // TV Scanlines
                shader.setUniform("scanlineIntensity", 0.1f);
                break;
            case 16: // Color Pulse
                shader.setUniform("time", timeValue);
                shader.setUniform("pulseColor", sf::Vector3f(1.0f, 0.0f, 0.0f)); // Red pulse color
                break;
            case 17: // Liquid Metal
                shader.setUniform("time", timeValue);
                shader.setUniform("speed", 1.0f);
                break;
            case 18: // Dreamy Glow
                shader.setUniform("glowColor", sf::Vector3f(1.0f, 1.0f, 1.0f)); // White glow
                shader.setUniform("glowIntensity", 0.5f);
                break;
            case 19: // Pixel Wave
                shader.setUniform("time", timeValue);
                shader.setUniform("waveIntensity", 1.0f);
                break;
            }
        }

        window.clear();
        window.draw(sprite, &shader);
        window.display();
    }

    return 0;
}
