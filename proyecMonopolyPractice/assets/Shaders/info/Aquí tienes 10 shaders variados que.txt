Aquí tienes 10 shaders variados que puedes usar en tu proyecto SFML. Cada uno está escrito en GLSL y es un fragment shader.

1. Shader de Sepia
Este shader aplica un efecto sepia a la imagen, dándole un tono cálido y envejecido.

glsl
Copiar código
uniform sampler2D texture;
void main() {
    vec4 color = texture2D(texture, gl_TexCoord[0].xy);
    float gray = dot(color.rgb, vec3(0.3, 0.59, 0.11));
    gl_FragColor = vec4(gray * vec3(1.2, 1.0, 0.8), color.a);
}
2. Shader de Inversión de Colores
Este shader invierte los colores de la imagen, creando un efecto de "negativo fotográfico".

glsl
Copiar código
uniform sampler2D texture;
void main() {
    vec4 color = texture2D(texture, gl_TexCoord[0].xy);
    gl_FragColor = vec4(vec3(1.0) - color.rgb, color.a);
}
3. Shader de Desenfoque Gaussiano
Este shader aplica un desenfoque (blur) en la dirección horizontal.

glsl
Copiar código
uniform sampler2D texture;
uniform vec2 resolution;

void main() {
    vec2 uv = gl_TexCoord[0].xy;
    vec4 color = vec4(0.0);
    vec2 off = vec2(1.0 / resolution.x, 0.0);
    color += texture2D(texture, uv - off * 4.0) * 0.05;
    color += texture2D(texture, uv - off * 3.0) * 0.09;
    color += texture2D(texture, uv - off * 2.0) * 0.12;
    color += texture2D(texture, uv - off * 1.0) * 0.15;
    color += texture2D(texture, uv) * 0.18;
    color += texture2D(texture, uv + off * 1.0) * 0.15;
    color += texture2D(texture, uv + off * 2.0) * 0.12;
    color += texture2D(texture, uv + off * 3.0) * 0.09;
    color += texture2D(texture, uv + off * 4.0) * 0.05;
    gl_FragColor = color;
}
4. Shader de Binarización
Este shader convierte la imagen en blanco y negro, basado en un umbral.

glsl
Copiar código
uniform sampler2D texture;
uniform float threshold;

void main() {
    vec4 color = texture2D(texture, gl_TexCoord[0].xy);
    float gray = dot(color.rgb, vec3(0.3, 0.59, 0.11));
    float binarized = gray > threshold ? 1.0 : 0.0;
    gl_FragColor = vec4(vec3(binarized), color.a);
}
5. Shader de Desplazamiento (Wave Distortion)
Este shader distorsiona la imagen en forma de ondas, creando un efecto de agua o calor.

glsl
Copiar código
uniform sampler2D texture;
uniform float time;
uniform vec2 resolution;

void main() {
    vec2 uv = gl_TexCoord[0].xy;
    uv.y += sin(uv.x * 10.0 + time * 5.0) * 0.05;
    gl_FragColor = texture2D(texture, uv);
}
6. Shader de Corrección de Color (Saturación)
Este shader ajusta la saturación de los colores en la imagen.

glsl
Copiar código
uniform sampler2D texture;
uniform float saturation;

void main() {
    vec4 color = texture2D(texture, gl_TexCoord[0].xy);
    float gray = dot(color.rgb, vec3(0.3, 0.59, 0.11));
    vec3 desaturated = vec3(gray);
    gl_FragColor = vec4(mix(desaturated, color.rgb, saturation), color.a);
}
7. Shader de Borrado de Bordes (Edge Detection)
Este shader detecta los bordes en la imagen, usando un operador Sobel.

glsl
Copiar código
uniform sampler2D texture;
uniform vec2 resolution;

void main() {
    vec2 uv = gl_TexCoord[0].xy;
    vec2 off = 1.0 / resolution.xy;
    
    float dx = texture2D(texture, uv + vec2(off.x, 0)).r - texture2D(texture, uv - vec2(off.x, 0)).r;
    float dy = texture2D(texture, uv + vec2(0, off.y)).r - texture2D(texture, uv - vec2(0, off.y)).r;
    
    float edge = sqrt(dx * dx + dy * dy);
    gl_FragColor = vec4(vec3(edge), 1.0);
}
8. Shader de Ruido Perlin (Noise)
Este shader genera un ruido basado en Perlin que puedes usar para efectos de fuego o humo.

glsl
Copiar código
uniform vec2 resolution;
uniform float time;

float random(vec2 p) {
    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);
}

float noise(vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);
    
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));
    
    vec2 u = f * f * (3.0 - 2.0 * f);
    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

void main() {
    vec2 uv = gl_TexCoord[0].xy * resolution.xy;
    float n = noise(uv * 10.0 + time);
    gl_FragColor = vec4(vec3(n), 1.0);
}
9. Shader de Filtro de Color (Tint)
Este shader aplica un tinte de color a la imagen.

glsl
Copiar código
uniform sampler2D texture;
uniform vec3 tint;

void main() {
    vec4 color = texture2D(texture, gl_TexCoord[0].xy);
    gl_FragColor = vec4(color.rgb * tint, color.a);
}
10. Shader de Sombra (Drop Shadow)
Este shader aplica una sombra proyectada a la imagen, dando un efecto de profundidad.

glsl
Copiar código
uniform sampler2D texture;
uniform vec2 offset;
uniform vec4 shadowColor;

void main() {
    vec2 uv = gl_TexCoord[0].xy;
    vec4 shadow = texture2D(texture, uv + offset) * shadowColor;
    vec4 color = texture2D(texture, uv);
    
    gl_FragColor = max(color, shadow);
}
Estos shaders son personalizables para diferentes efectos visuales. Puedes ajustar los valores o combinarlos para obtener resultados únicos en tu proyecto.






Dijiste:
quiero un shader que al pasar el cursos se vean ondas como de olas
ChatGPT dijo:
ChatGPT
Para crear un shader que genere un efecto de ondas en el área donde pasa el cursor, puedes usar la posición del cursor como un punto de origen de distorsión en la textura. A medida que el cursor se mueve, el shader puede distorsionar los píxeles alrededor del punto, simulando ondas de agua. Aquí te dejo un ejemplo de shader que hace eso:

Shader de Ondas al Pasar el Cursor
glsl
Copiar código
uniform sampler2D texture;
uniform vec2 resolution;   // Tamaño de la pantalla
uniform vec2 mousePos;     // Posición del cursor (en coordenadas normalizadas: 0.0 a 1.0)
uniform float time;        // Tiempo para animar las ondas

void main() {
    vec2 uv = gl_TexCoord[0].xy;
    vec2 mouse = mousePos * resolution;   // Convertimos las coordenadas normalizadas a coordenadas de la pantalla
    
    // Calculamos la distancia entre cada píxel y la posición del cursor
    float dist = distance(uv * resolution, mouse);
    
    // Generamos una onda usando una función seno que varía con la distancia al cursor y el tiempo
    float wave = sin(dist * 0.1 - time * 5.0) * 0.01;
    
    // Desplazamos la textura en la dirección de la onda
    vec2 displacedUV = uv + normalize(uv - mousePos) * wave;
    
    // Obtenemos el color desplazado de la textura
    vec4 color = texture2D(texture, displacedUV);
    
    // Aplicamos el color final
    gl_FragColor = color;
}
Explicación:
Posición del cursor (mousePos): El shader recibe la posición del cursor en coordenadas normalizadas (valores entre 0.0 y 1.0), que luego se convierte a la escala de la pantalla.

Distancia al cursor: Se calcula la distancia entre la posición del cursor y cada píxel de la textura.

Onda: Utilizamos la función seno para crear una onda que varía según la distancia al cursor y el tiempo, dando la sensación de propagación de ondas.

Desplazamiento de la textura: Cada píxel se desplaza ligeramente en la dirección de la onda, creando el efecto de distorsión ondulante.

Tiempo (time): El tiempo hace que las ondas se animen y se propaguen, creando un efecto dinámico.

Implementación:
mousePos: Para pasar la posición del cursor al shader, debes actualizarla en tu código C++ de SFML.

Aquí tienes un ejemplo de cómo pasar la posición del cursor y el tiempo al shader en SFML:

cpp
Copiar código
// Cargar el shader
sf::Shader shader;
shader.loadFromFile("waveShader.frag", sf::Shader::Fragment);

// En tu bucle principal
while (window.isOpen()) {
    sf::Vector2i mousePixelPos = sf::Mouse::getPosition(window);
    sf::Vector2f mousePos = window.mapPixelToCoords(mousePixelPos);

    // Normalizamos la posición del mouse
    sf::Vector2f mouseNormPos = sf::Vector2f(mousePos.x / window.getSize().x, mousePos.y / window.getSize().y);

    // Pasamos la posición del mouse y el tiempo al shader
    shader.setUniform("mousePos", mouseNormPos);
    shader.setUniform("time", clock.getElapsedTime().asSeconds());
    shader.setUniform("resolution", sf::Vector2f(window.getSize().x, window.getSize().y));

    // Dibujar usando el shader
    window.clear();
    window.draw(sprite, &shader);
    window.display();
}
Este código se encarga de pasar la posición del cursor y el tiempo al shader, creando las ondas dinámicas en el área del cursor.