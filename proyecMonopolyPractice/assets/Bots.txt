std::vector<std::string> botNames = {
    "CyberX", "AIron", "NeuralX", "RoboTrek", "MechaBot",
    "OmegaAI", "QuantumX", "ByteStorm", "PixelNova", "EchoTron",
    "CyberBot", "RoboZeta", "NeuralAI", "TitanX", "MechaX",
    "HyperBot", "DataPulse", "MetaCore", "ByteBlade", "AetherAI",
    "CyberShock", "NeoBot", "NanoTron", "CircuitX", "OmegaBit",
    "NeonByte", "CodeZero", "QuantumAI", "PixelX", "AlphaBot",
    "BetaX", "DeltaBot", "MechaPrime", "GlitchX", "SynapseX",
    "DataGhost", "RoboZen", "BinaryX", "VoidByte", "CyberX1",
    "HoloByte", "VirtualX", "NeuralX1", "CortexBot", "PixelX1",
    "TechX1", "NeonWave", "AIEnigma", "RoboX", "HyperX1",
    "ProtoAI", "BotNova", "MechaX1", "RoboXtreme", "QuantumX1",
    "ByteX1", "CyberPhantom", "TechPulse", "CodeX1", "MechaTitan",
    "ZeroAI", "DataSpecter", "NeuralEcho", "InfinityX", "NeonX",
    "SynthAI", "CyberSurge", "TechX", "CodeSpecter", "RoboPrime",
    "CircuitX2", "ByteSpectra", "NanoX", "CyberGlitch", "BotXtreme",
    "MetaByte", "NeuralXtreme", "QuantumZen", "PixelCyber", "VirtX",
    "HyperX", "NanoStorm", "NeonX2", "OmegaCore", "CyberPulse",
    "GlitchBot", "AIStorm", "HoloStorm", "TitanCode", "CyberX3",
    "CircuitX3", "BotX2", "QuantumPhantom", "CodeGlitch",
    "HoloNova", "NeonCircuit", "TechnoX", "CyberGuardian", "EchoAI",
    "BinaryZen", "VirtualX2", "MechaX3", "ByteNova", "NeuralX4",
    "QuantumGuardian", "AIPrime", "CyberX5", "NeoSpecter", "CodeX4",
    "TechX2", "BotCortex", "CircuitStorm", "QuantumX4", "PixelX5",
    "HyperNova", "CyberByteX", "NeuralGuardian", "MetaKnight", "NeonByteX",
    "AIPhantom", "RoboTitan", "SynthKnight", "CyberStormX", "QuantumPulse",
    "CircuitZen", "BotEcho", "DataKnight", "GlitchKnight", "HyperMecha",
    "CyberTitanX", "NeonPrime", "TechnoStorm", "NeuralSpecter", "ByteTitan",
    "CircuitPrime", "QuantumSurge", "HoloKnight", "CodeStorm", "MetaStorm",
    "AIOverlord", "CyberX6", "NeuralZero", "TechNomad", "DataZen",
    "NeonOverdrive", "BotNexus", "HyperStorm", "AIStormX", "QuantumNexus",
    "BytePhantomX", "CircuitGuardian", "CyberEchoX", "PixelWarrior",
    "NeonCyberX", "TechSentinelX", "MechaZero", "DataSpecterX", "GlitchStorm",
    "TechnoOverlord", "VirtualZero", "CyberOmega", "CodeOverdrive",
    "MetaPhantom", "QuantumTitan", "NanoGuardian", "ByteKnightX",
    "AIByteKnight", "CircuitOverdrive", "HoloGuardianX", "SynthTitan",
    "TechNovaX", "NeuralXero", "CyberVortex", "QuantumByteX", "MechaNovaX",
    "VirtualCyber", "AIStormKnight", "NanoPrimeX", "BotSurgeX", "OmegaEcho",
    "CyberAether", "HyperQuantum", "NeonByteKnight", "CircuitPhantomX",
    "NeuralSpectraX", "DataOverdriveX", "QuantumRogue", "CyberXtremeKnight",
    "MetaStormKnight", "HoloByteNova", "NeuralHyperDrive", "QuantumOverlord",
    "ByteNeonStorm", "MechaEchoKnight", "CircuitAIKnight", "TechZeroX",
    "DataQuantumStorm", "NeonGlitchKnight", "SynthCyberStorm", "NeuralSpecterX",
    "BotPhantomStorm", "AIQuantumKnight", "CyberKnightOverdrive", "OmegaStorm",
    "MetaDataKnight", "HoloCircuitStorm", "NeonAIOverlord", "QuantumGuardianX",
    "HyperAIStorm", "TechByteGuardian", "CyberGlitchPhantom", "DataOverlordX",
    "VirtualNeonPhantom", "AIHyperSentinel", "NeuralKnightOverdrive",
    "ByteDataKnightX", "CircuitQuantumKnight", "MechaOverlordKnight",
    "CyberSpecterStorm", "QuantumByteOverdrive", "TechnoGuardianKnight",
    "NeonZeroSentinel", "HyperAIPhantom", "SynthNeuralKnight",
    "AIQuantumGuardian", "MetaCyberStorm", "HoloByteOverdrive",
    "TechOverlordKnight", "CyberAIStormKnight", "DataHyperGuardian",
    "QuantumXtremeKnight", "NeonDataPhantom", "VirtualStormOverdrive",
    "CircuitGuardianSentinel", "MechaZeroSpecter", "AIQuantumOverlord",
    "NeuralHoloStormKnight", "SynthAIQuantumKnight", "BotXtremeSentinel",
    "CyberTitanOverdrive", "QuantumGuardianSpecter", "HoloByteAIKnight",
    "NeuralOverdriveGuardian", "MetaAIQuantumSentinel", "HyperStormAIKnight",
    "TechGuardianOverlord", "NeuralStormOverdriveKnight", "CircuitAIByteKnight",
    "QuantumSentinelStorm", "CyberBytePhantom", "HoloNeuralGuardianKnight",
    "NeonStormQuantumKnight", "TechGuardianHyperKnight", "MechaCircuitSentinel",
    "AIQuantumStormKnight", "ByteAIOverlordKnight", "VirtualDataSentinelKnight",
    "NeuralGuardianStormKnight", "MetaQuantumHyperKnight", "CyberNeonSentinel",
    "QuantumOverlordDataKnight", "AIHyperNeuralStorm", "BotByteGuardianKnight",
    "CircuitTechOverdriveKnight", "MechaHoloStormKnight", "CyberQuantumAIKnight",
    "QuantumByteGuardianSentinel", "AIStormQuantumOverdrive", "NeuralXtremeOverlordKnight",
    "MetaStormAIOverdrive", "HoloGuardianXtremeKnight", "TechNeuralHyperSentinel",
    "CyberGuardianNeonOverdrive", "QuantumAIStormOverlordKnight", "NeuralOverdriveXtremeSentinel"
};



std::string getUniqueBotName() {
    if (botNames.empty()) return "BotDefault"; // Evita errores si se acaban los nombres
    int index = rand() % botNames.size();
    std::string name = botNames[index];
    botNames.erase(botNames.begin() + index); // Elimina el nombre ya usado
    return name;
}

std::string getUniqueAvatar() {
    if (avatarPaths.empty()) return "assets/image/Avatars/default.png"; // Imagen por defecto
    int index = rand() % avatarPaths.size();
    std::string avatar = avatarPaths[index];
    avatarPaths.erase(avatarPaths.begin() + index); // Elimina el avatar ya usado
    return avatar;
}





void createBot() {
    PlayerInformation playerInfoNew;
    PlayerGameOff playerGameNew;

    // Asignar nombre único
    playerInfoNew.playerName = getUniqueBotName();

    // Asignar avatar único
    sf::Texture botAvatarTexture;
    if (!botAvatarTexture.loadFromFile(getUniqueAvatar())) {
        std::cerr << "Error al cargar avatar." << std::endl;
    }
    sf::Sprite botAvatarSprite;
    botAvatarSprite.setTexture(botAvatarTexture);

    // Asignar propiedades del bot
    playerInfoNew.PiecUserme = true;
    playerGameInfo.push_back(playerInfoNew);

    playerGameNew.CashSprite.setTexture(TextureMoney1);
    playerGameNew.Home.setTexture(TextureBuilding);

    playerGameNew.NamePlayer.setCharacterSize(17);
    playerGameNew.NamePlayer.setFont(fontUserProfile);
    playerGameNew.NamePlayer.setFillColor(sf::Color::White);
    playerGameNew.NamePlayer.setOutlineThickness(2);
    playerGameNew.NamePlayer.setOutlineColor(sf::Color(135, 135, 135));
    playerGameNew.NamePlayer.setString(playerInfoNew.playerName);

    sf::FloatRect globalBounds = playerGameNew.NamePlayer.getGlobalBounds();
    playerGameNew.NamePlayer.setOrigin(globalBounds.width / 2.0f, globalBounds.height / 2.0f);

    playerGameNew.boxPlayer.setTexture(textureBoxPerfilOff);
    playerGameNew.boxPlayer.setOrigin(125, 40);
    playerGameNew.boxPlayer.setScale(0.9f, 0.9f);

    // Agregar el bot a la lista de jugadores
    playerGameOff.push_back(playerGameNew);
}



srand(time(0)); // Asegurar aleatoriedad
createBot();
createBots(5);  // Crea 5 bots de una vez























