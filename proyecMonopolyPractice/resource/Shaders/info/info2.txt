
Aquí tienes algunos shaders interesantes que puedes usar en SFML. Te mostraré algunos efectos básicos como desenfoque, ondas, y colores invertidos, con su respectivo código y cómo implementarlos en tu proyecto.

1. Shader de Desenfoque Gaussiano (Blur)
Este shader aplica un efecto de desenfoque suave a la pantalla.

Código del Shader (blur.frag):

glsl
Copiar código
uniform sampler2D texture;
uniform vec2 resolution;
uniform float radius;

void main() {
    vec2 uv = gl_TexCoord[0].xy;
    vec4 color = vec4(0.0);
    
    float total = 0.0;
    
    // Desenfoque con un radio específico
    for (float x = -radius; x <= radius; x++) {
        for (float y = -radius; y <= radius; y++) {
            float weight = exp(-(x*x + y*y) / (2.0 * radius * radius));
            color += texture2D(texture, uv + vec2(x, y) / resolution) * weight;
            total += weight;
        }
    }
    
    gl_FragColor = color / total;
}
Cómo usarlo en SFML:

cpp
Copiar código
sf::Shader blurShader;
blurShader.loadFromFile("blur.frag", sf::Shader::Fragment);
blurShader.setUniform("resolution", sf::Glsl::Vec2(window.getSize()));
blurShader.setUniform("radius", 5.0f);  // Ajusta el radio según el nivel de desenfoque

window.draw(sprite, &blurShader);
2. Shader de Ondas (Wave Distortion)
Este shader crea un efecto de distorsión de ondas en la pantalla.

Código del Shader (wave.frag):

glsl
Copiar código
uniform sampler2D texture;
uniform vec2 resolution;
uniform float time;

void main() {
    vec2 uv = gl_TexCoord[0].xy;
    
    // Movimiento ondulante en el eje X
    float wave = sin(uv.y * 10.0 + time) * 0.02;
    uv.x += wave;
    
    gl_FragColor = texture2D(texture, uv);
}
Cómo usarlo en SFML:

cpp
Copiar código
sf::Shader waveShader;
waveShader.loadFromFile("wave.frag", sf::Shader::Fragment);
waveShader.setUniform("resolution", sf::Glsl::Vec2(window.getSize()));
waveShader.setUniform("time", clock.getElapsedTime().asSeconds());

window.draw(sprite, &waveShader);
3. Shader de Inversión de Colores (Color Inversion)
Este shader invierte los colores de la imagen.

Código del Shader (invert.frag):

glsl
Copiar código
uniform sampler2D texture;

void main() {
    vec4 color = texture2D(texture, gl_TexCoord[0].xy);
    
    // Invertir colores
    color.rgb = vec3(1.0) - color.rgb;
    
    gl_FragColor = color;
}
Cómo usarlo en SFML:

cpp
Copiar código
sf::Shader invertShader;
invertShader.loadFromFile("invert.frag", sf::Shader::Fragment);

window.draw(sprite, &invertShader);
4. Shader de Ruido (Noise)
Este shader aplica un efecto de ruido similar a un "grano de película".

Código del Shader (noise.frag):

glsl
Copiar código
uniform sampler2D texture;
uniform float time;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main() {
    vec2 uv = gl_TexCoord[0].xy;
    vec4 color = texture2D(texture, uv);
    
    // Agregar ruido
    float noise = rand(uv + time);
    color.rgb += noise * 0.05;  // Intensidad del ruido
    
    gl_FragColor = color;
}
Cómo usarlo en SFML:

cpp
Copiar código
sf::Shader noiseShader;
noiseShader.loadFromFile("noise.frag", sf::Shader::Fragment);
noiseShader.setUniform("time", clock.getElapsedTime().asSeconds());

window.draw(sprite, &noiseShader);
5. Shader de Escala de Grises (Grayscale)
Este shader convierte la imagen a tonos de gris.

Código del Shader (grayscale.frag):

glsl
Copiar código
uniform sampler2D texture;

void main() {
    vec4 color = texture2D(texture, gl_TexCoord[0].xy);
    
    // Convertir a escala de grises
    float gray = dot(color.rgb, vec3(0.299, 0.587, 0.114));
    
    gl_FragColor = vec4(vec3(gray), color.a);
}
Cómo usarlo en SFML:

cpp
Copiar código
sf::Shader grayscaleShader;
grayscaleShader.loadFromFile("grayscale.frag", sf::Shader::Fragment);

window.draw(sprite, &grayscaleShader);
Puedes aplicar estos shaders a tus objetos o fondos en SFML y combinarlos para crear efectos más complejos. Solo necesitas cargar el shader, configurar los uniformes y aplicar el shader al dibujar tus sprites o texturas.

Si tienes más ideas o algún efecto específico en mente, puedo ayudarte a encontrar o escribir más shaders para tu proyecto.